[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jaf-py"
version = "2.1.0"
description = "A purely functional agent framework with immutable state and composable tools - Python implementation"
readme = "README.md"
license = "MIT"
authors = [
    {name = "JAF Contributors"},
]
maintainers = [
    {name = "JAF Contributors"},
]
keywords = ["ai", "agents", "functional", "python", "llm", "mcp", "model-context-protocol", "agent-framework", "functional-programming"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "pydantic>=2.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "openai>=1.0.0",
    "typing-extensions>=4.5.0",
    "websockets>=11.0.0",
    "httpx>=0.25.0",
    "httpx-sse>=0.4.0",
    "google-generativeai>=0.3.0",
    "google-auth>=2.20.0",
    "python-dotenv>=1.0.0",
    "psutil>=5.9.0",
    "fastmcp>=0.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "respx>=0.20.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "hypothesis>=6.0.0",
]
server = [
    "uvicorn[standard]>=0.24.0",
]
memory = [
    "redis>=5.0.0",
    "psycopg2-binary>=2.9.0",
]
visualization = [
    "graphviz>=0.20.0",
]
all = [
    "jaf-py[dev,server,memory,visualization]",
]

[project.urls]
Homepage = "https://github.com/xynehq/jaf-py"
Repository = "https://github.com/xynehq/jaf-py"
Documentation = "https://xynehq.github.io/jaf-py/"
Issues = "https://github.com/xynehq/jaf-py/issues"
Changelog = "https://github.com/xynehq/jaf-py/releases"

[project.scripts]
jaf = "jaf.cli:cli_main"

[tool.setuptools.packages.find]
include = ["jaf*"]

[tool.pytest.ini_options]
testpaths = [
    "tests",
    "jaf/a2a/tests", 
    "jaf/a2a/memory/tests",
    "tests/visualization"
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--tb=short"
]
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
    "unit: marks tests as unit tests",
    "a2a: marks tests related to A2A protocol",
    "memory: marks tests related to memory providers", 
    "visualization: marks tests related to visualization"
]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "uvicorn.*",
    "redis.*",
    "psycopg2.*",
    "graphviz.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py313"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # assert statements (allow in tests)
    "T201",  # print statements (allow for debugging/demos)
    "T203",  # pprint statements
    "COM812", # trailing comma conflicts with formatter
    "ARG001", # unused function argument (common in agent patterns)
    "ARG002", # unused method argument (common in protocols/interfaces)
    "ARG005", # unused lambda argument (common in functional patterns)
    "N818",  # exception naming
    "S603",  # subprocess call (needed for CLI tools)
    "S607",  # subprocess without full path
    "S307",  # eval() use (documented as unsafe in examples)
    "S106",  # hardcoded password (test fixtures)
    "F405",  # may be undefined from star imports (__init__.py)
    "F401",  # imported but unused (test availability checks)
    "F841",  # assigned but never used (some test setups)
    "UP035", # typing deprecation (gradual migration)
    "UP006", # type annotation modernization (gradual migration)
    "RUF001", # ambiguous unicode characters
    "W291",  # trailing whitespace (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403", "F405"]  # Allow star imports and unused imports in __init__.py
"tests/**/*" = ["E501", "S101", "ARG001", "ARG002", "F841", "UP006", "UP035"]  # Allow assert, unused args in tests
"examples/**/*" = ["T201", "T203", "S101", "ARG001", "S307", "UP006", "UP035", "F841", "W291"]  # Allow print statements and asserts in examples
"jaf/a2a/examples/**/*" = ["T201", "T203", "S101", "ARG001", "UP006", "UP035"]  # Allow print statements in A2A examples
"**/demo*.py" = ["T201", "T203", "ARG001", "UP006", "UP035", "W291"]  # Allow print statements in demo files
"**/test_*.py" = ["S101", "ARG001", "ARG002", "F841", "UP006", "UP035"]  # Allow assert and unused args in test files
"**/validate*.py" = ["T201", "F401", "RUF001", "UP006", "UP035", "F841", "ARG001", "ARG005", "S603"]  # Allow all patterns in validation scripts
"jaf/core/tracing.py" = ["ARG001", "ARG002"]  # Allow unused args in tracing callbacks
"jaf/policies/handoff.py" = ["ARG001", "ARG002"]  # Allow unused args in policy functions

[tool.coverage.run]
source = ["jaf"]
omit = [
    "*/tests/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
