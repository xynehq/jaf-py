name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y graphviz

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install graphviz

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install graphviz

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,memory,visualization]"

    - name: Lint with ruff
      run: |
        ruff check . --output-format=github --exit-zero
      continue-on-error: true  # Allow linting issues for now while cleaning up

    - name: Type check with mypy
      run: |
        mypy jaf/ --ignore-missing-imports --no-strict-optional --follow-imports=skip
      continue-on-error: true  # Allow mypy failures for now

    - name: Test with pytest
      env:
        # Redis connection for tests
        REDIS_URL: redis://localhost:6379
        # PostgreSQL connection for tests
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
        POSTGRES_DB: testdb
      run: |
        pytest tests/ --tb=short -v

    - name: Test A2A components
      env:
        REDIS_URL: redis://localhost:6379
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
        POSTGRES_DB: testdb
      run: |
        pytest jaf/a2a/tests/ --tb=short -v

    - name: Test Memory components
      env:
        REDIS_URL: redis://localhost:6379
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
        POSTGRES_DB: testdb
      run: |
        pytest jaf/a2a/memory/tests/ --tb=short -v -x
      continue-on-error: true  # Memory tests may be timing-sensitive

    - name: Test Visualization components
      run: |
        pytest tests/visualization/ --tb=short -v

    - name: Build package
      run: |
        python -m build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && hashFiles('coverage.xml') != ''
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true  # Don't fail CI if coverage upload fails

  test-integration:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y graphviz

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,memory,visualization]"

    - name: Run integration tests
      env:
        REDIS_URL: redis://localhost:6379
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
        POSTGRES_DB: testdb
      run: |
        python validate_complete_framework.py
        python validate_a2a_implementation.py

    - name: Run all test suites
      env:
        REDIS_URL: redis://localhost:6379
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
        POSTGRES_DB: testdb
      run: |
        python run_all_tests.py --suite smoke
        python run_all_tests.py --suite core

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Security audit with bandit
      run: |
        bandit -r jaf/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Check for known vulnerabilities with safety
      run: |
        safety check --json
      continue-on-error: true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Generate API documentation
      run: |
        # Add API doc generation when we have sphinx setup
        echo "API documentation generation placeholder"

    - name: Validate README and examples
      run: |
        # Validate that all Python code blocks in README are valid
        python -c "
        import re
        with open('README.md', 'r') as f:
            content = f.read()
        # Extract Python code blocks
        python_blocks = re.findall(r'```python\n(.*?)\n```', content, re.DOTALL)
        for i, block in enumerate(python_blocks):
            try:
                compile(block, f'<README_block_{i}>', 'exec')
                print(f'✅ Code block {i+1} is valid')
            except SyntaxError as e:
                print(f'❌ Code block {i+1} has syntax error: {e}')
                exit(1)
        print(f'✅ All {len(python_blocks)} code blocks validated')
        "